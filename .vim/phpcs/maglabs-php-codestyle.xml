<?xml version="1.0"?>
<ruleset name="PHP_CodeSniffer">
  <description>The coding standard for PHP_CodeSniffer itself.</description>

  <!-- Line Limit is 90. 140 is the Maximum -->
  <rule ref="Generic.Files.LineLength">
    <properties>
      <property name="lineLimit" value="90"/>
      <property name="absoluteLineLimit" value="140"/>
    </properties>
  </rule>

  <!--No Tabs-->
  <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

  <!-- Indent is 2 Space -->
  <rule ref="Generic.WhiteSpace.ScopeIndent">
    <properties>
      <property name="indent" value="2"/>
    </properties>
  </rule>

   <!-- Function Arguments: there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
  <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
    <properties>
      <property name="equalsSpacing" value="1"/>
    </properties>
  </rule>
  <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint">
    <severity>0</severity>
  </rule>

  <!--The function brace is on the same line as the function declaration. One space is required between the closing parenthesis and the brace.-->
  <rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie"/>

  <!--No More 'else if', 'elseif' instead-->
  <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>

  <!--Enforces show control signatures are spaced-->
  <rule ref="PEAR.ControlStructures.ControlSignature"/>

  <!-- No unused function parameters are allowed. -->
  <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>

  <!-- PHP keywords MUST be in lower case. -->
  <rule ref="Generic.PHP.LowerCaseKeyword"/>

  <!-- Ensures that $this is not used in static methods to avoid runtime errors -->
  <rule ref="Squiz.Scope.StaticThisUsage"/>

  <!--Ensures that there is no whitespace before a semicolon.-->
  <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

  <!-- Reports cases where incrementer jumbling might happen in 'for' loops. -->
  <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>

  <!-- Enforces function call signatures "foo($a, $b, $c)" style reporting all other whitespaces. -->
  <rule ref="PEAR.Functions.FunctionCallSignature">
    <properties>
      <property name="indent" value="2"/>
    </properties>
  </rule>

  <!-- Warns about code that can never been executed. This happens when a function returns before the code, or a break ends execution of a statement etc. -->
  <rule ref="Squiz.PHP.NonExecutableCode"/>

  <!-- Checks the separation between methods in a class or interface. Methods are expected to have three blank lines between them. -->
  <rule ref="Squiz.WhiteSpace.FunctionSpacing">
    <properties>
      <property name="spacing" value="3"/>
    </properties>
  </rule>

  <!-- Ensure there is a single space after scope keywords. -->
  <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

  <!-- Ensures all language constructs (without brackets) contain a single space between themselves and their content. -->
  <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>

  <!-- Ensures that there is one space before and after a logical operator. -->
  <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>

  <!-- Ensures that operators have one space surrounding them. -->
  <rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
</ruleset>
